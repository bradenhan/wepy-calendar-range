<style lang="less">
  .date-bar{
    display: flex;
    align-items: center;
    height: 60rpx;
    margin: 40rpx 0 0;
    padding: 10rpx;
    font-size: 28rpx;

    > view {
      flex: 1;
      text-align: center;
    }
  }

  .calendar-mask{
    position: fixed;
    top: 0;
    left: 0;
    bottom: 0;
    z-index: 10;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,.6)
  }

  .calendar{
    position: fixed;
    left: 0;
    bottom: 0;
    z-index: 11;
    padding: 0 0 100rpx;
    background: #fff;
    font-size: 32rpx;

    .confirm-bar{
      display: flex;
      justify-content: space-between;
      height: 60rpx;
      padding: 10rpx 40rpx;
      border-top: 1rpx solid #e9e9e9;
      background: #f8f8f8;
      line-height: 60rpx;
    }

    .select-bar{
      padding: 20rpx 40rpx;
      border-top: 1rpx solid #e9e9e9;
      background: #f8f8f8;
      line-height: 60rpx;

      > view{
        display: flex;
        justify-content: space-between;
        view {
          padding: 0 20rpx 0 0;
        }
      }
    }

    .calendar-header{
      display: flex;
      height: 60rpx;
      padding: 40rpx 0;
      border-top: 1rpx solid #e9e9e9;

      > view{
        flex: 1;
        display: flex;
        padding: 0 60rpx;
      }

      .disabed{
        opacity: .5;
      }

      .prev{
        width: 60rpx;
        font-size: 0;
        &:after{
          content: '\e6a6';
          font-family: 'iconfont';
          font-size: 40rpx;
        }
      }

      .next{
        width: 60rpx;
        font-size: 0;
        &:after{
          display: block;
          content: '\e6a6';
          font-family: 'iconfont';
          font-size: 40rpx;
          transform: rotate(180deg);
        }
      }

      .current-month{
        flex: 1;
        text-align: center;
      }
    }

    .calendar-week{
      display: flex;
      height: 60rpx;
      view{
        flex: 1;
        text-align: center;
      }
    }

    .calendar-day{
      width: 750rpx;
      height: 360rpx;
      view{
        display: inline-block;
        width: 107rpx;
        height: 60rpx;
        color: #999;
        text-align: center;
        line-height: 60rpx;

        &.disabed{
          opacity: .5;

          &.currentMonth{
            color: #999;
          }
        }

        &.select{
          background: #333;
          color: #fff;
        }

        &.currentMonth{
          color: #333;

          &.select{
            background: #333;
            color: #fff;
          }

          &.current{
            background: #f30;
            color: #fff;
          }

        }
      }
    }
  }
</style>

<template id="">
  <view class="calendar-wrap">
    <view class="date-bar" @tap="showCalendarPanel">
      <view>
        <view>
          {{startDayText}}
        </view>
        <view>
          <!-- <view wx:if="{{startDate.day}}">{{startDate.day}}</view> -->
          <view wx:if="{{startDay}}">{{startDay}}</view>
          <view wx:else>请选择{{startDayText}} </view>
        </view>
      </view>
      <view wx:if="{{showPeriod}}">
        <view wx:if="{{period}}">
          共 <text>{{period}}</text> 天
        </view>
      </view>
      <view>
        <view>
          {{endDayText}}
        </view>
        <view>
          <!-- <view wx:if="{{endDate.day}}">{{endDate.day}}</view> -->
          <view wx:if="{{endDay}}">{{endDay}}</view>
          <view wx:else>请选择{{endDayText}} </view>
        </view>
      </view>
      </view>
    </view>
    <view class="calendar-mask" wx:if="{{showCalendar}}" @tap = "confirm"></view>
    <view class="calendar" wx:if="{{showCalendar}}">
      <view class="confirm-bar">
        <view @tap = "cancel">取消</view>
        <view @tap = "confirm">确定</view>
      </view>
      <view class="select-bar">
        <view>
          <view>{{startDayText}}</view>
          <view>{{startDay}}</view>
        </view>
        <view>
          <view>{{endDayText}}</view>
          <view>{{endDay}}</view>
        </view>
      </view>
      <view class="calendar-header">
        <view>
          <view class="prev" @tap="prevYear" :class="{'disabed' : disPrevYear === 'on'}"> 上一页 </view>
          <view class="current-month">{{year}}</view>
          <view class="next" @tap="nextYear" :class="{'disabed' : disNextYear === 'on'}"> 下一页 </view>
        </view>

        <view>
          <view class="prev" @tap="prevMonth"> 上一页 </view>
          <view class="current-month">{{month}}</view>
          <view class="next" @tap="nextMonth"> 下一页 </view>
        </view>
      </view>
      <view class="calendar-week">
        <block wx:for="{{week}}" wx:key="week">
          <view> {{item}} </view>
        </block>
      </view>
      <view class="calendar-day">
        <block wx:for="{{calculate.days}}" wx:key="index">
          <view
            @tap="selectDay({{item}})"
            :class="{'disabed' : item.disabled === 'yes', 'select' : item.currentItem === 'has', 'current' : item.currentDay === 'on', 'currentMonth' : item.currentMonth === 'yes'}"
            >{{item.item}} </view>
        </block>
      </view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'

export default class calendar extends wepy.component {
  props = {
    startDay: {
      type: String,
      twoWay: true,
      default: null
    },
    endDay: {
      type: String,
      twoWay: true,
      default: null
    },
    period : {
      type: Number,
      twoWay: true,
      default: null
    },
    minDate : {
      type: String,
      twoWay: true,
      default: null
    },
    showPeriod : {
      type: Boolean,
      default: false
    },
    startDayText: {
      type: String,
      default: '开始日期'
    },
    endDayText: {
      type: String,
      default: '结束日期'
    }
  };

  data = {
    num : 1,
    showCalendar : false,
    week : [
      '周日',
      '周一',
      '周二',
      '周三',
      '周四',
      '周五',
      '周六'
    ],
    year : new Date().getFullYear(),
    month : new Date().getMonth() + 1,
    day : new Date().getDate(),
    current : false,
    startDate : {
      millisecond : '',
      day : '',
      dayIndex : '',
      month: '',
      date : ''
    },
    endDate : {
      millisecond : '',
      day : '',
      dayIndex : '',
      month: '',
      date : ''
    },
    disPrevYear : 'off',
    disNextYear : 'off',
    sameMonth : 'yes'
  }

  // 计算属性aPlus，在脚本中可通过this.aPlus来引用，在模板中可通过{{ aPlus }}来插值
  computed = {
    calculate () {
      let year = this.year,
          month = this.month,
          day = new Date(this.year+'/'+this.month+'/'+'1').getDay(),
          date = year+'/'+month+'/'+'1',
          whichDay = new Date(date).getDay(),
          daysDur,
          dayDur = [],
          tepBeforeDur = [],
          beforeDur = [],
          tepAfterDur = [],
          afterDur = [],
          finalDays = [];

      let message = {
         year: year,
         month: month,
         monthLen: new Date(year,month,0).getDate(),
         whichDay: whichDay,
         day: day,
         days : finalDays
      };

      // 循环显示每月的天数
      for(let i = 1; i <= message.monthLen; i++){
         dayDur.push({
           'disabled' : 'no',
           'currentMonth' : 'yes',
           'currentItem' : 'no',
           'currentDay' : 'no',
           'item' : i
         })
      }

      // 判断每月第一天是周几，空余部分补上一个月剩余天数
      {
        let prevMonthDay = new Date(message.year, (message.month - 1) ,0).getDate(), // 获取上个月的总天数
            tepArr = []; //临时数组，用于存储上个月的天数
        for(let i = 1;i <= prevMonthDay; i++){
          tepArr.push(i)
        }
        tepBeforeDur = tepArr.slice((prevMonthDay - message.day),prevMonthDay)

        tepBeforeDur.forEach((item,index) => {
            beforeDur.push({
              'disabled' : 'no',
              'currentMonth' : 'prev',
              'currentItem' : 'no',
              'currentDay' : 'no',
              'item' : item
            })
        })
      }

      // 判断每月最后一天是周几，空余部分补下一个月剩余天数
      {
        let nextMonthDay = new Date(message.year, (message.month) ,0).getDate(), // 获取下个月的总天数
            lastDay = new Date(message.year, (message.month - 1) ,message.monthLen).getDay(), // 每月最后一天是周几
            tepArr = []; //临时数组，用于存储上个月的天数

        for(let i = 1;i <= nextMonthDay; i++){
          tepArr.push(i)
        }

        if(lastDay === 6){
          tepAfterDur = tepArr.slice(0,7)
        } else {
          tepAfterDur = tepArr.slice(0,(6 - lastDay))
        }

        tepAfterDur.forEach((item,index) => {
            afterDur.push({
              'disabled' : 'no',
              'currentMonth' : 'next',
              'currentItem' : 'no',
              'currentDay' : 'no',
              'item' : item
            })
        })
      }

       // 拼接每月空余天数（插件从周日开始，但每个月不一定从周日开始，故需要补空）和每月实际天数
       daysDur = beforeDur.concat(dayDur).concat(afterDur);

       daysDur.forEach((item,index) => {
        finalDays.push(item)
       })

        // 添加索引值
        for(let i = 0; i <= finalDays.length; i++){
           for(var k in finalDays[i]){
             finalDays[i]['index'] = i;
           }
        }

       // 判断最小值
       if(!!this.minDate){
         let minDateArr = this.minDate.split('-'),
             minDateObj = {
                minYear : minDateArr[0],
                minMonth : minDateArr[1],
                minDay : minDateArr[2]
            };

          if(minDateObj.minYear == this.year){
            if(!!minDateObj.minMonth && this.month < minDateObj.minMonth){
              for(let i = 0; i < finalDays.length; i++){
                finalDays[i].disabled = 'yes'
              }
            }

            if(!!minDateObj.minMonth && !!minDateObj.minDay && minDateObj.minMonth == this.month){
              for(let i = 0; i < finalDays.length; i++){
                if(finalDays[i].item == minDateObj.minDay && finalDays[i].currentMonth === 'yes'){
                  for(let j = 0; j < finalDays[i].index; j++){
                    finalDays[j].disabled = 'yes'
                  }
                }
              }
            }
          }
       }

       // 判断结束时间和开始时间，添加选中状态
      {
          let startObj,
              endObj,
              temArr,
              startMillisecond = Date.parse(this.startDay.replace(/-/g,'/')),
              endMillisecond = Date.parse(this.endDay.replace(/-/g,'/'));

          if(!!this.startDay){
             temArr = this.startDay.split('-');
             startObj = {
               year : Number(temArr[0]),
               month : Number(temArr[1]),
               day : Number(temArr[2])
             }
          }

          if(!!this.endDay){
             temArr = this.endDay.split('-');
             endObj = {
               year : Number(temArr[0]),
               month : Number(temArr[1]),
               day : Number(temArr[2])
             }
          }

          if(!!startObj){
            if(startObj.month === this.month){
              finalDays.forEach((ele) => {
               if(ele.item === startObj.day && this.month === startObj.month && ele.currentMonth === 'yes'){
                finalDays[ele.index].currentItem = 'has'
                startObj.dayIndex = ele.index
               }
              })
            } else if(startObj.month === (this.month + 1) ){
              finalDays.forEach((ele) => {
               if(ele.item === startObj.day && ele.currentMonth === 'next'){
                 finalDays[ele.index].currentItem = 'has'
                 startObj.dayIndex = ele.index
               }
              })
            } else if(startObj.month === (this.month - 1)){
              finalDays.forEach((ele) => {
               if(ele.item === startObj.day && ele.currentMonth === 'prev'){
                 finalDays[ele.index].currentItem = 'has'
                 startObj.dayIndex = ele.index
               }
              })
            }
          }

          if(!!endObj){
            if(endObj.month === this.month){
              finalDays.forEach((ele) => {
               if(ele.item === endObj.day && this.month === endObj.month && ele.currentMonth === 'yes'){
                finalDays[ele.index].currentItem = 'has'
                endObj.dayIndex = ele.index
               }
              })
            } else if(endObj.month === (this.month + 1) ){
              finalDays.forEach((ele) => {
               if(ele.item === endObj.day && ele.currentMonth === 'next'){
                 finalDays[ele.index].currentItem = 'has'
                 endObj.dayIndex = ele.index
               }
              })
            } else if(endObj.month === (this.month - 1)){
              finalDays.forEach((ele) => {
               if(ele.item === endObj.day && ele.currentMonth === 'prev'){
                 finalDays[ele.index].currentItem = 'has'
                 endObj.dayIndex = ele.index
               }
              })
            }
          }

          // 判断区间，用于显示选中区间
          {
            if(!!endMillisecond && !! startMillisecond && (endMillisecond - startMillisecond) > 1000*60*60*24*1){
              if(startObj.year === this.year && endObj.year === this.year){
                for(let i = startObj.dayIndex; i <= endObj.dayIndex; i++){
                 finalDays[i].currentItem = 'has';
                }

                if(!! startObj.dayIndex && endObj.dayIndex === undefined){
                  // console.log('往前翻',finalDays.length)
                  for(let i = startObj.dayIndex; i < finalDays.length; i++){
                   finalDays[i].currentItem = 'has';
                  }
                }

                if(!! endObj.dayIndex && startObj.dayIndex === undefined){
                 // console.log('往后翻')
                  for(let i = 0; i <= endObj.dayIndex; i++){
                   finalDays[i].currentItem = 'has';
                  }
                }
              } else {
                  if(!!startObj.dayIndex && !!endObj.dayIndex){
                    finalDays[startObj.dayIndex].currentItem = 'no'
                    finalDays[endObj.dayIndex].currentItem = 'no'
                  }
              }
            }
          }
      }

       // 判断是否有值的情况
       if(!!this.startDay && !!this.endDay){
          let sDay = this.startDay.split('-')[2],
              eDay = this.endDay.split('-')[2],
              sDayMillisecond = Date.parse(this.startDay.replace(/-/g,'/')),
              eDayMillisecond = Date.parse(this.endDay.replace(/-/g,'/'));

          finalDays.forEach((ele,index) => {
           if(ele.item == sDay){
             this.startDate.dayIndex = ele.index;
           }

           if(ele.item == eDay){
             this.endDate.dayIndex = ele.index;
           }
          })

          // 计算周期
          this.period = (eDayMillisecond - sDayMillisecond)/(1000*60*60*24) + 1;
       }

       // 判断当前日期
       {
         let year = new Date().getFullYear(),
             month = new Date().getMonth() + 1,
             day = new Date().getDate();

         if(year >= this.year){
           this.disPrevYear = 'on'
         }

         if(year === this.year && month === this.month){
           finalDays.forEach((ele) => {
             if(ele.item == day){
               finalDays[ele.index].currentDay = 'on'
             }
           })
         }
       }

       finalDays = daysDur;
       return message;

    }
  }

  methods = {
    showCalendarPanel () {
      this.showCalendar = true;
    },
    prevYear () {
      if(this.disPrevYear !== 'on'){
        this.disNextYear = 'off'
        this.disPrevYear = 'on'
        this.year --;
      }
    },
    nextYear () {
      if(this.disNextYear !== 'on'){
        this.disPrevYear = 'off'
        this.disNextYear = 'on'
        this.year ++;
        if(this.month === 12){
          this.month = 1
        }
      }
    },
    prevMonth (){
      if(this.month > 1 ){
        this.month --;
      }
    },
    nextMonth () {
      if(this.month < 12 ){
        this.month ++;
      }
    },
    selectDay (ele){
      if(this.calculate.days[ele.index].disabled !== 'yes'){
        if(this.startDate.millisecond === ''){
          if(ele.currentMonth === 'yes'){
            this.startDate = {
              millisecond : Date.parse(this.year+'/'+ Number(this.month - 1) +'/' + ele.item),
              day : this.year+'-'+ this.month +'-' + ele.item,
              dayIndex : ele.index,
              month: this.month,
              date : ele.item
            }
            this.startDay = this.year+'-'+ this.month +'-' + ele.item;
            this.sameMonth = 'yes'
          } else if(ele.currentMonth === 'prev'){
            if(this.month  === 1){
              this.startDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                day : (this.year -1) +'-'+ (this.month + 11) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month + 11,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.startDay = (this.year -1)+'-'+ (this.month + 11) +'-' + ele.item;
            } else {
              this.startDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                day : this.year+'-'+ (this.month - 1) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month - 1,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.startDay = this.year+'-'+ (this.month - 1) +'-' + ele.item;
            }

          } else if (ele.currentMonth === 'next'){
            if(this.month  === 12){
              this.startDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                day : (this.year + 1) +'-'+ (this.month - 11) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month - 11,
                date : ele.item
              }

              this.sameMonth = 'yes'
              this.startDay = (this.year + 1) + '-'+ (this.month - 11) +'-' + ele.item;
            } else {
              this.startDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                day : this.year+'-'+ (this.month + 1) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month+ 1,
                date : ele.item
              }

              this.sameMonth = 'yes'
              this.startDay = this.year+'-'+ (this.month + 1) +'-' + ele.item;
            }
          }
        } else if(this.endDate.millisecond === ''){
          if(ele.currentMonth === 'yes'){
            this.endDate = {
              millisecond : Date.parse(this.year+'/'+ Number(this.month - 1) +'/' + ele.item),
              day : this.year+'-'+ this.month +'-' + ele.item,
              dayIndex : ele.index,
              month: this.month,
              date : ele.item
            }
            this.sameMonth = 'yes'
            this.endDay = this.year+'-'+ this.month +'-' + ele.item;
          } else if(ele.currentMonth === 'prev'){
            if(this.month  === 1){
              this.endDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                day : (this.year -1 ) +'-'+ (this.month + 11) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month + 11,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.endDay = (this.year -1 ) +'-'+ (this.month + 11) +'-' + ele.item;
            } else {
              this.endDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                day : this.year+'-'+ (this.month - 1) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month - 1,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.endDay = this.year+'-'+ (this.month - 1) +'-' + ele.item;
            }

          } else if (ele.currentMonth === 'next'){

            if(this.month  === 12){
              this.endDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                day : (this.year + 1) +'-'+ (this.month - 11) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month - 11,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.endDay = (this.year + 1) + '-'+ (this.month - 11) +'-' + ele.item;
            } else {
              this.endDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                day : this.year+'-'+ (this.month + 1) +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month + 1,
                date : ele.item
              }
              this.sameMonth = 'no'
              this.endDay = this.year+'-'+ (this.month + 1) +'-' + ele.item;
            }
          }
        } else {
          if(ele.currentMonth === 'yes'){
            this.startDate = {
                millisecond : Date.parse(this.year+'/'+ Number(this.month - 1) +'/' + ele.item),
                day : this.year+'-'+ this.month +'-' + ele.item,
                dayIndex : ele.index,
                month: this.month,
                date : ele.item
              }
              this.sameMonth = 'yes'
              this.startDay = this.year+'-'+ this.month +'-' + ele.item;
            } else if(ele.currentMonth === 'prev'){
              if(this.month  === 1){
                this.startDate = {
                  millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                  day : (this.year - 1) +'-'+ (this.month + 11) +'-' + ele.item,
                  dayIndex : ele.index,
                  month: this.month + 11,
                  date : ele.item
                }
                this.sameMonth = 'no'
                this.startDay = (this.year - 1) +'-'+ (this.month + 11) +'-' + ele.item;
              } else {
                this.startDate = {
                  millisecond : Date.parse(this.year+'/'+ Number(this.month - 2) +'/' + ele.item),
                  day : this.year+'-'+ (this.month - 1) +'-' + ele.item,
                  dayIndex : ele.index,
                  month: this.month - 1,
                  date : ele.item
                }
                this.sameMonth = 'no'
                this.startDay = this.year+'-'+ (this.month - 1) +'-' + ele.item;
              }

            } else if (ele.currentMonth === 'next'){
              if(this.month  === 12){
                this.startDate = {
                  millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                  day : (this.year + 1) +'-'+ (this.month - 11) +'-' + ele.item,
                  dayIndex : ele.index,
                  month: this.month - 11,
                  date : ele.item
                }
                this.sameMonth = 'no'
                this.startDay = (this.year + 1) +'-'+ (this.month - 11) +'-' + ele.item;
              } else {
                this.startDate = {
                  millisecond : Date.parse(this.year+'/'+ Number(this.month) +'/' + ele.item),
                  day : this.year+'-'+ (this.month + 1) +'-' + ele.item,
                  dayIndex : ele.index,
                  month: this.month + 1,
                  date : ele.item
                }
                this.sameMonth = 'no'
                this.startDay = this.year+'-'+ (this.month + 1) +'-' + ele.item;
              }
            }

            this.endDate = {
              millisecond : ''
            }
            this.endDay = '';
        }

        if(this.endDate.millisecond && this.startDate.millisecond){
          if((this.endDate.millisecond - this.startDate.millisecond) < 1000*60*60*24){
            this.endDay = '';
             wx.showToast({
               title: '请选择正确的结束时间',
               icon: 'none',
               duration: 2000
             })
          }
        }

        this.calculate.days[ele.index].currentItem = true;

      }
    },
    confirm (){
      this.showCalendar = false
    },
    cancel (){
      this.showCalendar = false
    }
  }
}
</script>
